body {
  background-color: gold;
}

.flex-container {
  /* This display:flex property is applied to a parent container */
  /* BUT This means that the CHILDREN are affected by flexbox */
  display: flex;
  /* By default, if you give a container a display:flex property, it will have flex-direction: row */
  /* flex-direction: row; */
  /* We can also give row-reverse, column, column-reverse */
  flex-direction: row;

  /* these next two help you to place and align your elements within the container */
  /* Have a google around for the different values you can give to them, especially space-around/space-between/space-evenly for justify-content! */
  justify-content: center;
  align-items: center;

  /* flex wrap helps us with responsive design. It shoves elements onto a new row if there's no space for it */
  flex-wrap: wrap;
  /* gap allows flexbox to automatically calculate even spacing between your elements. */
  gap: 20px;

  background-color: rgb(248, 173, 160);
  padding: 10px;

  width: 100%;
  height: 400px;
}

.box {
  width: 100px;
  height: 100px;

  padding: 5px;
  /* flex-grow placed on a flex child, will say "hey, occupy as much space as you can within the parent */
  flex-grow: 1;
}

.one {
  /* Mostly by default elements have a display of block */
  display: block;
  background-color: blue;
}

.two {
  background-color: lime;
}

.three {
  background-color: white;
}

.four {
  background-color: red;
}

.five {
  background-color: purple;
}
